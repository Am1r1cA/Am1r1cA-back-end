# -----------------------------
# App / environment
# -----------------------------
# APP ENVIRONMENT: development | staging | production
ENVIRONMENT=development

PROJECT_NAME=FastAPI Async Starter
VERSION=0.1.0

# -----------------------------
# Security
# -----------------------------
# Generate a secure key: python -c "import secrets;print(secrets.token_hex(32))"
# Treat SECRET_KEY as a SecretStr in Pydantic (settings.SECRET_KEY.get_secret_value())
SECRET_KEY=changeme_replace_with_secure_random_hex_64

# Toggle debug features (be careful in production)
DEBUG=True

# -----------------------------
# Postgres / SQLAlchemy (async)
# -----------------------------
# Preferred: provide a full SQLAlchemy URL using asyncpg driver:
#   postgresql+asyncpg://<user>:<password>@<host>:<port>/<db>
DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/postgres

# Optional separate components (useful for docker-compose templates or secret stores)
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432

# If your Postgres requires SSL: set sslmode=verify-full or require.
# Example: postgresql+asyncpg://user:pass@host:port/db?sslmode=require
POSTGRES_SSLMODE=disable

# SQLAlchemy pool tuning (tweak for production based on DB capacity)
# NOTE: exact application of these depends on how you create engine (pass to create_async_engine).
DB_POOL_MIN_SIZE=1
DB_POOL_MAX_SIZE=10
DB_POOL_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30

# Connection life / health: seconds before recycling connection (optional)
DB_POOL_RECYCLE_SECONDS=1800

# -----------------------------
# Alembic / migrations
# -----------------------------
# If alembic runs outside of app context, you may pass this; otherwise alembic can read DATABASE_URL from settings
ALEMBIC_DATABASE_URL=${DATABASE_URL}

# -----------------------------
# Uvicorn / Gunicorn runtime
# -----------------------------
# For local run with uvicorn: uvicorn app.main:app --host $UVICORN_HOST --port $UVICORN_PORT --reload=$UVICORN_RELOAD
UVICORN_HOST=0.0.0.0
UVICORN_PORT=8000
UVICORN_RELOAD=True
UVICORN_WORKERS=1

# When using Gunicorn + Uvicorn worker for production, map WORKERS to CPUs (e.g. 2-4)
GUNICORN_WORKERS=3
GUNICORN_TIMEOUT=120

# -----------------------------
# CORS / allowed hosts
# -----------------------------
# Comma separated list. Pydantic validator can split into list.
# Example: http://localhost:3000,http://127.0.0.1:3000
BACKEND_CORS_ORIGINS=http://localhost:3000

# Hosts allowed by server (comma separated)
ALLOWED_HOSTS=localhost,127.0.0.1

# -----------------------------
# Logging & observability
# -----------------------------
LOG_LEVEL=INFO
SENTRY_DSN=

# OpenTelemetry / tracing (endpoint or collector)
OTEL_COLLECTOR_URL=

# -----------------------------
# Redis (optional: caching, session, Celery)
# -----------------------------
REDIS_URL=redis://redis:6379/0

# -----------------------------
# Celery (optional)
# -----------------------------
CELERY_BROKER_URL=${REDIS_URL}
CELERY_RESULT_BACKEND=${REDIS_URL}

# -----------------------------
# Email (optional)
# -----------------------------
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=your-smtp-user
SMTP_PASSWORD=your-smtp-pass
SMTP_TLS=True
SMTP_FROM=noreply@example.com

# -----------------------------
# Feature toggles / limits
# -----------------------------
# Example: maximum allowed file upload size (bytes)
MAX_UPLOAD_SIZE=10485760

# -----------------------------
# Misc / timeouts
# -----------------------------
# External HTTP client timeout seconds
HTTP_CLIENT_TIMEOUT=10
